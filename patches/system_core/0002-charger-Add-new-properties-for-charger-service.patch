From c150f4d788877c000e3248c11a7bd1d49084b8b0 Mon Sep 17 00:00:00 2001
From: remittor <remittor@gmail.com>
Date: Wed, 23 Dec 2015 13:47:16 +0300
Subject: [PATCH] charger: Add new properties for charger service

on charger-fs
    setprop ro.charger.delay 3
    setprop ro.charger.power_key_code 107
    setprop ro.charger.ust 2
---
 charger/charger.c | 73 ++++++++++++++++++++++++++++++++++++++++++++++++++-----
 1 file changed, 67 insertions(+), 6 deletions(-)

diff --git a/charger/charger.c b/charger/charger.c
index 83d46c6..2fc8819 100644
--- a/charger/charger.c
+++ b/charger/charger.c
@@ -35,6 +35,7 @@
 #include <sys/socket.h>
 #include <linux/netlink.h>
 
+#include <cutils/properties.h>
 #include <cutils/android_reboot.h>
 #include <cutils/klog.h>
 #include <cutils/list.h>
@@ -99,6 +100,8 @@ enum MODE {
 };
 
 int mode = NORMAL;
+int power_key_code = KEY_POWER;
+int64_t unplugged_shutdown_time = UNPLUGGED_SHUTDOWN_TIME;
 
 struct key_state {
     bool pending;
@@ -163,6 +166,8 @@ struct uevent {
     const char *ps_name;
     const char *ps_type;
     const char *ps_online;
+    const char *ps_status;
+    const char *ps_chg_type;
 };
 
 static struct frame batt_anim_frames[] = {
@@ -457,6 +462,8 @@ static void parse_uevent(const char *msg, struct uevent *uevent)
     uevent->subsystem = "";
     uevent->ps_name = "";
     uevent->ps_online = "";
+    uevent->ps_status = "";
+    uevent->ps_chg_type = "";
     uevent->ps_type = "";
 
     /* currently ignoring SEQNUM */
@@ -479,6 +486,12 @@ static void parse_uevent(const char *msg, struct uevent *uevent)
         } else if (!strncmp(msg, "POWER_SUPPLY_ONLINE=", 20)) {
             msg += 20;
             uevent->ps_online = msg;
+        } else if (!strncmp(msg, "POWER_SUPPLY_STATUS=", 20)) {
+            msg += 20;
+            uevent->ps_status = msg;
+        } else if (!strncmp(msg, "POWER_SUPPLY_CHARGE_TYPE=", 25)) {
+            msg += 25;
+            uevent->ps_chg_type = msg;
         } else if (!strncmp(msg, "POWER_SUPPLY_TYPE=", 18)) {
             msg += 18;
             uevent->ps_type = msg;
@@ -489,9 +502,10 @@ static void parse_uevent(const char *msg, struct uevent *uevent)
             ;
     }
 
-    LOGV("event { '%s', '%s', '%s', '%s', '%s', '%s' }\n",
+    LOGV("event { '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s' }\n",
          uevent->action, uevent->path, uevent->subsystem,
-         uevent->ps_name, uevent->ps_type, uevent->ps_online);
+         uevent->ps_name, uevent->ps_type, uevent->ps_online,
+         uevent->ps_status, uevent->ps_chg_type);
 }
 
 static void process_ps_uevent(struct charger *charger, struct uevent *uevent)
@@ -529,6 +543,25 @@ static void process_ps_uevent(struct charger *charger, struct uevent *uevent)
     if (!strncmp(ps_type, "Battery", 7))
         battery = true;
 
+#ifdef BATTERY_DEVICE_NAME
+    if (battery) {
+      if (uevent->ps_online[0] == 0) {
+        uevent->ps_online = "0";
+        if (uevent->ps_chg_type[0]) {
+          if (!strncmp(uevent->ps_chg_type, "Trickle", 7))
+            uevent->ps_online = "1";
+          if (!strncmp(uevent->ps_chg_type, "Fast", 4))
+            uevent->ps_online = "1";
+        } else {
+          if (!strncmp(uevent->ps_status, "Charging", 8))
+            uevent->ps_online = "1";
+          if (!strncmp(uevent->ps_status, "Full", 4))
+            uevent->ps_online = "1";
+        }
+      }
+    }
+#endif
+
     online = atoi(uevent->ps_online);
     supply = find_supply(charger, uevent->ps_name);
     if (supply) {
@@ -931,7 +964,7 @@ static void process_key(struct charger *charger, int code, int64_t now)
     struct key_state *key = &charger->keys[code];
     int64_t next_key_check;
 
-    if (code == KEY_POWER) {
+    if (code == power_key_code) {
         if (key->down) {
             int64_t reboot_timeout = key->timestamp + POWER_ON_KEY_TIME;
             if (now >= reboot_timeout) {
@@ -971,7 +1004,7 @@ static void process_key(struct charger *charger, int code, int64_t now)
 
 static void handle_input_state(struct charger *charger, int64_t now)
 {
-    process_key(charger, KEY_POWER, now);
+    process_key(charger, power_key_code, now);
     process_key(charger, KEY_HOME, now);
     process_key(charger, KEY_HOMEPAGE, now);
 
@@ -993,9 +1026,9 @@ static void handle_power_supply_state(struct charger *charger, int64_t now)
                  */
                 exit(0);
             }
-            charger->next_pwr_check = now + UNPLUGGED_SHUTDOWN_TIME;
+            charger->next_pwr_check = now + unplugged_shutdown_time;
             LOGI("[%lld] device unplugged: shutting down in %lld (@ %lld)\n",
-                 now, UNPLUGGED_SHUTDOWN_TIME, charger->next_pwr_check);
+                 now, unplugged_shutdown_time, charger->next_pwr_check);
         } else if (now >= charger->next_pwr_check) {
             LOGI("[%lld] shutting down\n", now);
             android_reboot(ANDROID_RB_POWEROFF, 0, 0);
@@ -1249,6 +1282,7 @@ int main(int argc, char **argv)
     int64_t now = curr_time_ms() - 1;
     int fd;
     int i;
+    char tmp[PROPERTY_VALUE_MAX];
 
     list_init(&charger->supplies);
 
@@ -1277,6 +1311,33 @@ int main(int argc, char **argv)
 
     LOGI("--------------- STARTING CHARGER MODE ---------------\n");
 
+    ret = property_get("ro.charger.power_key_code", tmp, "");
+    if (ret > 0) {
+      int code = strtol(tmp, NULL, 0);
+      if (code > 0 && code < KEY_MAX) {
+        power_key_code = code;
+        LOGI("power_key_code = %d \n", power_key_code);
+      }
+    }
+
+    ret = property_get("ro.charger.ust", tmp, "");
+    if (ret > 0) {
+      int ust = strtol(tmp, NULL, 0);
+      if (ust > 0 && ust < 60) {
+        unplugged_shutdown_time = ust * MSEC_PER_SEC;
+        LOGI("unplugged_shutdown_time = %lld ms \n", unplugged_shutdown_time);
+      }
+    }
+
+    ret = property_get("ro.charger.delay", tmp, "");
+    if (ret > 0) {
+      int delay = strtol(tmp, NULL, 0);
+      if (delay >= 0) {
+        LOGI("delay: %d sec \n", delay);
+        sleep(delay);
+      }
+    }
+
     gr_init();
     gr_font_size(&char_width, &char_height);
 
-- 
1.9.5.msysgit.0

